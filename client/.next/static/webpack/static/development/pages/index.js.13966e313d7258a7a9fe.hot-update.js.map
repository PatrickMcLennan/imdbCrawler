{"version":3,"file":"static/webpack/static/development/pages/index.js.13966e313d7258a7a9fe.hot-update.js","sources":["webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/values.js","webpack:///./node_modules/core-js/library/fn/object/values.js","webpack:///./node_modules/core-js/library/modules/_object-to-array.js","webpack:///./node_modules/core-js/library/modules/es7.object.values.js","webpack:///./pages/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/object/values\");","require('../../modules/es7.object.values');\nmodule.exports = require('../../modules/_core').Object.values;\n","var getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","import { createGlobalStyle } from 'styled-components';\nimport 'isomorphic-fetch';\nimport Heading from '../components/Heading';\nimport MovieGrid from '../components/MovieGrid';\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    margin: 0;\n    padding: 0;\n    box-sizing: inherit;\n  }\n  html {\n    font-size: 62.5%;\n    box-sizing: border-box;\n  }\n  body {\n    font-family: Helvetica, Arial, sans-serif;\n    background: #e3e3e3\n  }\n`;\n\nconst Home = props => (\n  <>\n    <GlobalStyle />\n    {console.log(props)}\n    {console.log(Array.isArray(props))}\n    <Heading />\n    <MovieGrid movies={props} />\n  </>\n);\n\nHome.getInitialProps = async ({ req }) => {\n  const call = await fetch('http://localhost:4000/');\n  const data = await call.json();\n  const movies = [Object.values(data)];\n  return movies;\n};\n\nexport default Home;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AAEA;AACA;AAiBA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;;;;A","sourceRoot":""}